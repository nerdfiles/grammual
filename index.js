// Generated by CoffeeScript 1.11.1
(function() {
  var Grammuelle, Operation, Parser, _, __fs__, __q__, capture_array, capture_module, g, log, open;

  __fs__ = require('fs');

  __q__ = require('promise-defer');

  log = console.log;

  _ = require('lodash');

  open = function(f) {
    var defer;
    if (f == null) {
      f = './__test__.scss';
    }
    defer = __q__();
    __fs__.readFile(f, 'utf-8', function(error, data) {
      defer.resolve(data);
    });
    return defer.promise;
  };

  capture_module = function(view) {
    var firstCharOfName, m, name;
    if (m = view.match(/(\@include\s*(.*)\(\')(.*)(\')/)) {
      firstCharOfName = m[3].split('').reverse().pop().toUpperCase();
      return name = firstCharOfName + m[3].slice(1, m[3].length);
    }
  };

  capture_array = function(view) {
    var m, v, z;
    v = view.split('\n');
    counter++;
    if (m = view.match(/(\@include\s*(.*))/)) {
      if (z = m[2].match(/(.*)\(\(/)) {
        return z;
      }
    }
  };


  /*
  @class
  @name Parser
  @description
  Parser Contract Loader.
   */

  Parser = (function() {
    function Parser(parsers) {
      this.parsers = parsers;
    }

    Parser.prototype.contract = function(loaded, parser) {
      if (parser) {
        return parser(loaded || '');
      } else {
        return loaded;
      }
    };

    Parser.prototype.ready = function(view) {
      var p;
      return p = this.parsers.reduce(this.contract, view);
    };

    Parser.prototype.parse = function(content) {
      var c, list, view;
      c = content.split("\n");
      return list = _.filter((function() {
        var j, len, results;
        results = [];
        for (j = 0, len = c.length; j < len; j++) {
          view = c[j];
          results.push(this.ready(view));
        }
        return results;
      }).call(this));
    };

    return Parser;

  })();

  Operation = (function() {
    function Operation(op) {
      this.op = op;
      this.op;
    }

    return Operation;

  })();

  Grammuelle = (function() {
    var p;

    p = new Parser([capture_module]);

    function Grammuelle() {
      this.schema = null;
      this.done = null;
      open('./stylebook.scoffee').then(function(data) {
        return this.schema = data;
      });
    }

    Grammuelle.prototype.initialize = function() {
      return open().then(function(data) {
        var parseMap, psb;
        psb = p.parse(data);
        parseMap = _.map(psb, function(d) {
          return new Operation(d);
        });
        _.each(parseMap, function(q, i) {
          if (this.schema.match(/%%SCSS_NAME%%/)) {
            this.schema = this.schema.replace(/%%SCSS_NAME%%/g, q.op);
            return this.done = _.remove(parseMap, function(n) {
              return n === i;
            });
          } else {
            return this.schema = this.schema.replace(/%%SCSS_INNER%%/g, q.op);
          }
        });
        return log(this.schema);
      });
    };

    return Grammuelle;

  })();

  g = new Grammuelle;

  g.initialize();

}).call(this);
