// @fileOverview ./__declarations__.scss  
// @description  
// Declarative CSS à la (https://www.researchgate.net/publication/279039852_A_CSS_integration_model_for_declarative_3D).

// @cssdoc mixin  
// @name If  
// @description  
// Declarative lest conditional.

@mixin If ($type: "div") {
  #{$type} {
    @include __component__(
      $operation  : $operation,
      $components : $fieldInput
    ) {
      background: $defaultActionBg;
    }
  }
  @content;
}


// @cssdoc mixin  
// @name Then  
// @description  
// The usual.

@mixin Then ($type: "alert") {
  #{$type} {
    @include __component__(
      $operation  : $operationModal,
      $components : $fieldInput
    )
  }
}


// @cssdoc mixin  
// @name Then  
// @description  
// The usual.

@mixin Finally () {
  // @notimplemented
}


// @cssdoc mixin  
// @name Once  
// @description  
// Stuff you'd like to do once.

@mixin Once ($model: "anchor", $collection: ()) {
  $ch: false;
  $sy: "";

  @each $k, $z in $collection {
    @each $o, $u in $z {
      @if str-index($o, '_extend') == 1 {
        $ch: true;
      }
    }
  }

  @each $k, $p in $collection {
    @if $ch == false {
      $sy: "&:";
    } @else {
      $sy: "";
      $k: "&";
    }
    #{$sy}#{$k} {
      @each $j, $l in $p {
        @if $ch == false {
          @each $h, $m in $l {
            #{$h}: #{$m};
          }
        }
        @if $ch == true {
          @extend .#{$l} !optional;
        }
      }
    }
  }
}


// @cssdoc mixin  
// @name Spread  
// @description  
// Spreads are typically for columnar setups, but you can easily set up grid 
// logic if you need.  
// @TODO Constraint-based Classes; e.g. Class() { Spread() {} /* @extend .__column__ by Class? */ }

@mixin Spread($event: "__column__") {
  & {
    display: flex;

    @each $prop, $val in $panel {
      .#{$event} {
        @each $p, $v in $val {
          #{$prop} {
            $p: $v;
          }
        }
        @content;
      }
    }
  }
}


// @cssdoc mixin  
// @name With  
// @description  
// Haha, we implemented a JS bug.

@mixin With($layer: ()) {
  @each $i, $k in $layer {
    & {
      #{$i}: $k;
    }
  }

  @content;
}


// @cssdoc mixin  
// @name Schema  
// @description  
// ¯\\(°_o)/¯ 

@mixin Schema ($name: "", $config: ()) {

  $smResp: "#{$name}--sm";
  $mdResp: "#{$name}--md";
  $reResp: "#{$name}--retina";
  $prResp: "#{$name}--print";

  %#{$name} {
    @media (min-width: 801px) {
      %#{$smResp} {
        @content;
      }
    }
    @media (min-width: 992px) {
      %#{$mdResp} {
        @content;
      }
    }
    @media
      only screen and (-webkit-min-device-pixel-ratio: 2),
      only screen and (min--moz-device-pixel-ratio: 2),
      only screen and (-o-min-device-pixel-ratio: 2/1),
      only screen and (min-device-pixel-ratio: 2),
      only screen and (min-resolution: 192dpi),
      only screen and (min-resolution: 2dppx) {
      %#{$reResp} {
        @content;
      }
    }
    @media only print {
      %#{$prResp} {
        @content
      }
    }
  }
}


// @cssdoc mixin  
// @name Responses  
// @description  
// Optionally same extenders.

@mixin Responses ($collection: ()) {
  @each $el in $collection {
    & {
      @extend %#{$el};
    }
  }
  @content;
}


// @cssdoc mixin  
// @name Has  
// @description  
// @usage  
// @If($type: 'footer') { @Has('footer', $object) { @include Do($module) } }

@mixin Has ($sel, $objects: ()) {
  @each $o, $n in $objects {
    @if str-index($o, $sel) == 1 {
      [$sel] {
        @content;
      }
    }
  }
}
