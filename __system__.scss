// @fileOverview ./__system__.scss

// @vars
$__rules__: null;


// @cssdoc mixin  
// @name Class  
// @description

@mixin Class ($bem, $args, $rule: null) {

  @if $rule == null {
    $rule: "#{$bem}";
  }

  #{$rule} {
    @content;
  }
}


// @cssdoc mixin  
// @name define  
// @description  
// Define placeholder.

@mixin Define ($key) {
  #{$key} {
    @include Rules($name: "_cell", $rules: $__rules__) {
      @content;
    };
  }
}


// @cssdoc mixin  
// @name Rules  
// @description  
// Print rules

@mixin Rules ($name: null, $rules: null, $icon: "\f095", $font-family: FontAwesome) {

  @each $key, $value in $rules {

    @if (type-of($value) == "map") {
      @include Rule($key: $name, $value: $value) {
        #{$key} {
          span {
            @if type-of($icon) == 'string' {
              &:before {
                font-family: $font-family;
                content: $icon;
              }
            }
            //content: "#{$name}";
            //first pass
            @content;
          }
        };

      }

      $__rules__: $rules;
    }

    @if (type-of($key) == "string") {
      @if (str-index($name, '_') == 1 or str-index($key, '_') == 1) {
        @include Define($key: $key) {
          @content;
        }
      }
    }
  }

  @if $rules == null {
    @content;
  }
}


// @cssdoc mixin  
// @name Rule  
// @description  
// Like pie.

@mixin Rule ($key, $value) {

  @if (type-of($key) == 'string') {
    #{$key} {
      @each $i, $k in $value {
        #{$i}: $k;
      }
    }
    @content;
  }
}


// @cssdoc mixin  
// @name Wrap  
// @description  
// Define wrap styles.  
// @usage  
//   a { @include Wrap($rulesBefore, $rulesAfter, $mirrorContent: "."); }

@mixin Wrap ($rulesBefore, $rulesAfter, $mirrorContent) {
  &::before {
    @include Rules($rulesBefore) {
      @if type-of($mirrorContent) == 'string' {
        content: "#{$mirrorContent}";
      }
    }
  }
  &::after {
    @include Rules($rulesAfter) {
      @if type-of($mirrorContent) == 'string' {
        content: "#{$mirrorContent}";
      }
    }
  }
}


